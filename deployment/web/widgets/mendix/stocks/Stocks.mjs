import React, { useState, createElement } from 'react';

const api = {
  key: "783aaba01dmsh4d6258e9276ffdap1f8f29jsnbed481b82bab",
  host: "real-time-finance-data.p.rapidapi.com"
};
function HelloWorldSample({
  sampleText
}) {
  const [search, setSearch] = useState("");
  const [timeline, setTimeLine] = useState("");
  const [period, setPeriod] = useState({});
  const searchPressed = () => {
    fetch(`https://real-time-finance-data.p.rapidapi.com/stock-time-series-source-2?symbol=${search}&period=${timeline}`, {
      method: 'GET',
      headers: {
        'x-rapidapi-key': api.key,
        'x-rapidapi-host': api.host
      }
    }).then(res => res.json()).then(result => {
      setPeriod(result);
    }).catch(error => {
      console.error('Error fetching data:', error);
    });
  };
  return createElement(React.Fragment, null, createElement("div", {
    className: "widget-wrapper"
  }, createElement("h2", null, sampleText), createElement("div", null, createElement("input", {
    className: "myInput",
    type: "text",
    placeholder: "Search here...",
    onChange: e => setSearch(e.target.value)
  }), createElement("input", {
    className: "myInput",
    type: "text",
    placeholder: "Duration",
    onChange: e => setTimeLine(e.target.value)
  }), createElement("button", {
    className: "mysearchbtn",
    onClick: searchPressed
  }, "Search")), period.data && createElement("div", {
    className: "period-info"
  }, createElement("p", {
    className: "myptag"
  }, "Symbol: ", period.data.symbol), createElement("p", {
    className: "myptag"
  }, "Price: ", period.data.price), createElement("p", {
    className: "myptag"
  }, "Exchange: ", period.data.exchange), createElement("p", {
    className: "myptag"
  }, "Type: ", period.data.type), createElement("p", {
    className: "myptag"
  }, "Day Low: ", period.data.day_low), createElement("p", {
    className: "myptag"
  }, "Day High: ", period.data.day_high), createElement("p", {
    className: "myptag"
  }, "Year Low: ", period.data.year_low), createElement("p", {
    className: "myptag"
  }, "Year High: ", period.data.year_high), createElement("p", {
    className: "myptag"
  }, "Currency: ", period.data.currency), createElement("p", {
    className: "myptag"
  }, "Volume: ", period.data.volume), createElement("p", {
    className: "myptag"
  }, "Previous Close: ", period.data.previous_close), createElement("p", {
    className: "myptag"
  }, "Change: ", period.data.change), createElement("p", {
    className: "myptag"
  }, "Change Percent: ", period.data.change_percent), createElement("p", {
    className: "myptag"
  }, "Timezone: ", period.data.exchange_timezone))));
}

function Stocks({
  sampleText
}) {
  return createElement(HelloWorldSample, {
    sampleText: sampleText
  });
}

export { Stocks };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
